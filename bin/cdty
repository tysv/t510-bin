#!/bin/bash

fpath="$HOME/bin/.cdty"

if [ ! -e "$fpath" ]; then
	touch $fpath
	echo "---->  Initialized cdty directory list. Calling 'cdty -h' now."
	cdty -h
fi

if [ "$#" -eq 0 ]; then
	echo "<---Keywords		Destinations--->"
	echo "----------------------------------------"
	cat "$fpath"
	echo "----------------------------------------"


elif [ "$#" -eq 1 ]; then
	key="$1"
	#special cases
	if [ $key = "edit" ] || [ $key = "-e" ]; then
		#echo "edit"
		nano "$fpath"
		return 0
	fi
	if [ $key = "help" ] || [ $key = "-h" ] || [ $key = "?" ]; then
		echo "cdty usage:"
		echo "cdty			shows you the list of linked directories."
		echo "cdty <key> 		takes you to the directory linked w/<keyword>."
		echo "cdty <-e/edit>		opens the file containing linked directories."
		echo "cdty <key> <directory> 	records a new key-directory pair."
		echo "cdty <key> here		records a new key-\$PWD      pair."
		echo "cdty <-h/help/?>	print this message."
		echo "cdty failover: will look for key among ($HOME/*)"
		return 0
	fi
	# INTENDED TERMINATION POINT
	while read -r line; do #read in the .cdty file
		read -a words <<< "$line" #split into array, divided by the white space
		if [ "$key" = "${words[0]}" ]; then
			cd "${words[1]}"
			return 0
		fi
	done < "$fpath"
	#SECONDARY ATTEMPTS
	#CHECK HOME DIRECTORY PATH FOR DIRECTORY_NAMES WHICH MATCH THE KEY
	home_dirs=($(find -P "$HOME" -maxdepth 5 -type d ! -wholename "*/.*"))
	key="${key,,}"
	for dir in "${home_dirs[@]}"; do #funfact: ${,,} forces lowercase
		formatted="$(basename "$dir")"; formatted="${formatted,,}"
		if [ "$key" = "$formatted" ]; then cd "$dir"; return 0
		fi
	done
	#echo "${home_dirs[@]}"; return 0
	echo "no match found for key: $key"
	return 1


elif [ "$#" -eq 2 ]; then
	key=$1
	dest=$2
	if [ $dest = "here" ]; then dest="$PWD"; fi
	if [ -d "$dest" ]; then
		while read -r line; do
			read -a words <<< $line
			if [ $key = ${words[0]} ]; then
				echo "duplicate key already in use:"
				echo "$key		${words[1]}"
				return 0
			fi
		done < $fpath
		echo "$key $dest" >> $fpath
	else
		echo "invalid directory path"
	fi
else
	echo 'Unexpected behavior tbh'
fi
